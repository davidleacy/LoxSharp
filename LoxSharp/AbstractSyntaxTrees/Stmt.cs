// <auto-generated />
#nullable enable

namespace LoxSharp.AbstractSyntaxTrees;

using LoxSharp.Models;

internal abstract class Stmt {
    public interface IVisitor<T> {
        public T VisitBlockStmt(Block stmt);
        public T VisitExpressionStmt(Expression stmt);
        public T VisitIfStmt(If stmt);
        public T VisitPrintStmt(Print stmt);
        public T VisitVarStmt(Var stmt);
        public T VisitWhileStmt(While stmt);
    }

    public class Block: Stmt {
        public readonly List<Stmt> statements;

        public Block(List<Stmt> statements) {
            this.statements = statements;
        }

        public override T Accept<T>(IVisitor<T> visitor) {
            return visitor.VisitBlockStmt(this);
        }
    }

    public class Expression: Stmt {
        public readonly Expr expression;

        public Expression(Expr expression) {
            this.expression = expression;
        }

        public override T Accept<T>(IVisitor<T> visitor) {
            return visitor.VisitExpressionStmt(this);
        }
    }

    public class If: Stmt {
        public readonly Expr condition;
        public readonly Stmt thenBranch;
        public readonly Stmt? elseBranch;

        public If(Expr condition, Stmt thenBranch, Stmt? elseBranch) {
            this.condition = condition;
            this.thenBranch = thenBranch;
            this.elseBranch = elseBranch;
        }

        public override T Accept<T>(IVisitor<T> visitor) {
            return visitor.VisitIfStmt(this);
        }
    }

    public class Print: Stmt {
        public readonly Expr expression;

        public Print(Expr expression) {
            this.expression = expression;
        }

        public override T Accept<T>(IVisitor<T> visitor) {
            return visitor.VisitPrintStmt(this);
        }
    }

    public class Var: Stmt {
        public readonly Token name;
        public readonly Expr? initializer;

        public Var(Token name, Expr? initializer) {
            this.name = name;
            this.initializer = initializer;
        }

        public override T Accept<T>(IVisitor<T> visitor) {
            return visitor.VisitVarStmt(this);
        }
    }

    public class While: Stmt {
        public readonly Expr condition;
        public readonly Stmt body;

        public While(Expr condition, Stmt body) {
            this.condition = condition;
            this.body = body;
        }

        public override T Accept<T>(IVisitor<T> visitor) {
            return visitor.VisitWhileStmt(this);
        }
    }

    public abstract T Accept<T>(IVisitor<T> visitor);
}
