namespace LoxSharp.GenerateAst;

using System.Text;

public class GenerateAst
{
    /// <summary>
    /// Main entry point to the LoxSharp GenerateAst program which is used to auto-generate the Abstract Syntax Trees for expressions.
    /// </summary>
    /// <param name="args"></param>
    public static void Main(string[] args)
    {
        if (args.Length != 1)
        {
            Console.WriteLine("Usage: .\\LoxSharp.GenerateAst.exe <output directory>");
            // If an error occurs be good command line citizens and return an error status code.
            Environment.Exit(-65);
        }

        string outputDir = args[0];

        DefineAst(outputDir, "Expr", new List<string>
        {
            "Assign   : Token name, Expr value",
            "Binary   : Expr left, Token op, Expr right",
            "Call     : Expr callee, Token paren, List<Expr> arguments",
            "Grouping : Expr expression",
            "Literal  : Object value",
            "Logical  : Expr left, Token op, Expr right",
            "Unary    : Token op, Expr right",
            "Variable : Token name"
        });

        DefineAst(outputDir, "Stmt", new List<string>
        {
            "Block      : List<Stmt> statements",
            "Expression : Expr expression",
            "Function   : Token name, List<Token> parameters, List<Stmt> body",
            "If         : Expr condition, Stmt thenBranch, Stmt? elseBranch",
            "Print      : Expr expression",
            "Var        : Token name, Expr? initializer",
            "Return     : Token keyword, Expr? value",
            "While      : Expr condition, Stmt body"
        });
    }

    private static void DefineAst(
      string outputDir, string baseName, List<string> types)
    {
        string path = outputDir + "/" + baseName + ".cs";
        StreamWriter writer = new StreamWriter(path, append: false, encoding: Encoding.UTF8);

        writer.WriteLine("// <auto-generated />");
        writer.WriteLine("#nullable enable");
        writer.WriteLine();
        writer.WriteLine("namespace LoxSharp.AbstractSyntaxTrees;");
        writer.WriteLine();
        writer.WriteLine("using LoxSharp.Models;");
        writer.WriteLine();
        writer.WriteLine("internal abstract class " + baseName + " {");

        DefineVisitor(writer, baseName, types);

        // The AST classes.
        foreach (string type in types)
        {
            string className = type.Split(":")[0].Trim();
            string fields = type.Split(":")[1].Trim();
            DefineType(writer, baseName, className, fields);
        }

        // The base accept() method.
        writer.WriteLine("    public abstract T Accept<T>(IVisitor<T> visitor);");

        writer.WriteLine("}");
        writer.Close();
    }

    private static void DefineVisitor(
        StreamWriter writer,
        string baseName,
        List<string> types)
    {
        writer.WriteLine("    public interface IVisitor<T> {");

        foreach (string type in types)
        {
            string typeName = type.Split(":")[0].Trim();
            writer.WriteLine("        public T Visit" + typeName + baseName + "(" +
                typeName + " " + baseName.ToLower() + ");");
        }

        writer.WriteLine("    }");
        writer.WriteLine();
    }

    private static void DefineType(
      StreamWriter writer,
      string baseName,
      string className,
      string fieldList)
    {
        string[] fields = fieldList.Split(", ");

        writer.WriteLine("    public class " + className + ": " + baseName + " {");

        // Fields.
        foreach (string field in fields)
        {
            writer.WriteLine("        public readonly " + field + ";");
        }
        writer.WriteLine();

        // Constructor.
        writer.WriteLine("        public " + className + "(" + fieldList + ") {");

        // Store parameters in fields.
        foreach (string field in fields)
        {
            string name = field.Split(" ")[1];
            writer.WriteLine("            this." + name + " = " + name + ";");
        }

        writer.WriteLine("        }");
        // Visitor pattern.
        writer.WriteLine();
        writer.WriteLine("        public override T Accept<T>(IVisitor<T> visitor) {");
        writer.WriteLine("            return visitor.Visit" +
            className + baseName + "(this);");
        writer.WriteLine("        }");

        writer.WriteLine("    }");
        writer.WriteLine();
    }
}
